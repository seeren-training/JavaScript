<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="fr">
  <head>
    <title>Chapitre 05: Utiliser des fonctions - Formation JavaScript Initiation</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <link rel="stylesheet" type="text/css" href="css/33d0c34f96e6afed4baa666fd7bfab67.css" media="all"/>
    <link rel="stylesheet" type="text/css" href="css/f786f0fa752fdc2603a99d15b85cb5fd.css" media="all and (orientation: portrait)"/>
  </head>
  <body>
    <div class="chapitre-content" id="ch_05">
      <h2>
        <span>Chapitre 05:</span>
        <a>Utiliser des fonctions</a>
      </h2>
      <div class="content-box">
        <strong>Les fonctions</strong>
        <p>Les fonctions sont des objets Function qui permettent d'encapsuler des instructions dans un bloc afin d'y faire appel. Les fonctions peuvent poss&#xE9;der des arguments afin de leur transmettre des valeurs et peuvent &#xE9;galement retourner une valeur de fin d'instruction.</p>
      </div>
      <h3 id="c_05_declarer">D&#xE9;clarer et invoquer une fonction</h3>
      <div class="content-box">
        <h4>function</h4>
        <p>Une fonction peut &#xEA;tre une expression ou une instruction, dans les deux cas elles sont un objet Function, elle peut aussi utiliser le constructeur Function pour obtenir une instance de cet objet.</p>
        <strong>Instruction function</strong>
        <p>En utilisant une instruction de fonction nomm&#xE9;e, l'objet sera cr&#xE9;&#xE9; au runtime et sera accessible avant sa d&#xE9;claration dans le programme.</p>
      </div>
      <div class="content-syntaxe">
        <em>function identifiant([param1[, param2[, ...,paramN]]]) {}</em>
      </div>
      <div class="content-code">
        <strong>Instruction function</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">function&#xA0;</span><span style="color: #ffffff">maFonction</span><span style="color: #ffcc00">()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"Instruction&#xA0;function"</span><span style="color: #ffcc00">);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Pour faire appel &#xE0; une instruction function il faut invoquer son identifiant suivi de ses parenth&#xE8;ses d'ex&#xE9;cution.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">function&#xA0;</span><span style="color: #ffffff">maFonction</span><span style="color: #ffcc00">()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"Instruction&#xA0;function"</span><span style="color: #ffcc00">);
<br/>}
<br/></span><span style="color: #8c8c8c">//&#xA0;Instruction&#xA0;function
<br/></span><span style="color: #ffffff">maFonction</span><span style="color: #ffcc00">();</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <h4>Instruction</h4>
        <p>Une instruction function cr&#xE9;e l'objet au runtime, il est possible d'invoquer la fonction avant la ligne de sa d&#xE9;claration dans le script.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #8c8c8c">//&#xA0;Instruction&#xA0;function
<br/></span><span style="color: #ffffff">maFonction</span><span style="color: #ffcc00">();
<br/>function&#xA0;</span><span style="color: #ffffff">maFonction</span><span style="color: #ffcc00">()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"Instruction&#xA0;function"</span><span style="color: #ffcc00">);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>D&#xE9;claration de function</strong>
        <p>En d&#xE9;clarant une fonction, l'objet sera cr&#xE9;&#xE9; apr&#xE8;s le parsetime et ne sera pas accessible &#xE0; n'importe quel moment.</p>
      </div>
      <div class="content-syntaxe">
        <em>function [identifiant]([param1[, param2[, ..., paramN]]]) {}</em>
      </div>
      <div class="content-code">
        <strong>D&#xE9;claration de function</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">maFonction&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"D&#xE9;claration&#xA0;de&#xA0;function"</span><span style="color: #ffcc00">);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Pour faire appel &#xE0; une d&#xE9;claration de function il faut invoquer l'identifiant qui contient la d&#xE9;claration suivi de ses parenth&#xE8;ses d'ex&#xE9;cution.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">maFonction&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"D&#xE9;claration&#xA0;de&#xA0;function"</span><span style="color: #ffcc00">);
<br/>}
<br/></span><span style="color: #8c8c8c">//&#xA0;D&#xE9;claration&#xA0;de&#xA0;function
<br/></span><span style="color: #ffffff">maFonction</span><span style="color: #ffcc00">();</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <h4>D&#xE9;claration</h4>
        <p>Une d&#xE9;claration de function cr&#xE9;e l'objet apr&#xE8;s le parsetime, il n'est pas possible d'invoquer la fonction avant la ligne de sa d&#xE9;claration dans le script.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #8c8c8c">//&#xA0;TypeError:&#xA0;maFonction&#xA0;is&#xA0;not&#xA0;a&#xA0;function
<br/></span><span style="color: #ffffff">maFonction</span><span style="color: #ffcc00">();
<br/>var&#xA0;</span><span style="color: #ffffff">maFonction&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"D&#xE9;claration&#xA0;de&#xA0;function"</span><span style="color: #ffcc00">);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>Instance de Function</strong>
        <p>En utilisant l'op&#xE9;rateur d'instanciation sur le constructeur Function ou en l'invoquant, un objet de type Function sera cr&#xE9;&#xE9;. Son traitement est similaire &#xE0; une d&#xE9;claration de function, mais il ne peut atteindre que des variables globales ou ses propres variables, il n'aura pas acc&#xE8;s aux variables du contexte dans lequel il a &#xE9;t&#xE9; cr&#xE9;&#xE9;.</p>
      </div>
      <div class="content-syntaxe">
        <em>var fonction = [new] Function ([param1[, param2[, ..., paramN]], ] instructions)</em>
      </div>
      <div class="content-code">
        <strong>Instanciation de Function</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">maFonction&#xA0;</span><span style="color: #ffcc00">=&#xA0;new&#xA0;Function(</span><span style="color: #2aa198">"console.log(\"Instanciation&#xA0;de&#xA0;Function\")"</span><span style="color: #ffcc00">);
<br/></span><span style="color: #8c8c8c">//&#xA0;console.log("Instanciation&#xA0;de&#xA0;Function");
<br/></span><span style="color: #ffffff">maFonction</span><span style="color: #ffcc00">();</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <p>Il faut noter que pour cr&#xE9;er une fonction en instanciant Function, l'op&#xE9;rateur d'instanciation new est optionnel.</p>
      </div>
      <h3 id="c_05_argument">Retour et arguments</h3>
      <div class="content-box">
        <h4>return</h4>
        <p>L'instruction return renvoie la valeur de l'expression qui lui succ&#xE8;de et met fin &#xE0; l'ex&#xE9;cution des instructions d'une fonction. L'expression de retour est optionnelle et sa valeur par d&#xE9;faut est undefined.</p>
      </div>
      <div class="content-syntaxe">
        <em>return [expression = undefined]; </em>
      </div>
      <div class="content-code">
        <strong>Instruction return</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">function&#xA0;</span><span style="color: #ffffff">maFontion</span><span style="color: #ffcc00">()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;</span><span style="color: #ffffff">true</span><span style="color: #ffcc00">;
<br/>}
<br/></span><span style="color: #8c8c8c">//&#xA0;true
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">maFontion</span><span style="color: #ffcc00">());</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Apr&#xE8;s un return les instructions ne seront pas ex&#xE9;cut&#xE9;es.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">function&#xA0;</span><span style="color: #ffffff">maFontion</span><span style="color: #ffcc00">()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;return;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"Jamais&#xA0;ex&#xE9;cut&#xE9;"</span><span style="color: #ffcc00">);
<br/>}
<br/></span><span style="color: #8c8c8c">//&#xA0;undefined
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">maFontion</span><span style="color: #ffcc00">());</span>
</span>
</code>
      </div>
      <div class="content-box">
        <h4>Les arguments</h4>
        <p>La signature d'une fonction peut comporter des arguments ou param&#xE8;tres, ce sont des valeurs ou des objets qui seront transmis sous forme de variables locales &#xE0; la fonction. Les objets sont pass&#xE9;s par r&#xE9;f&#xE9;rence ce qui signifie qu'ils ne sont pas copi&#xE9;s et que leurs modifications au sein de la fonction impactent l'objet en dehors de la fonction. Par d&#xE9;faut un argument vaut undefined.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">function&#xA0;</span><span style="color: #ffffff">maFontion</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">argument</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">argument</span><span style="color: #ffcc00">);
<br/>}
<br/></span><span style="color: #8c8c8c">//&#xA0;undefined
<br/></span><span style="color: #ffffff">maFontion</span><span style="color: #ffcc00">();</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Il est possible de d&#xE9;clarer plusieurs arguments dans la signature d'une fonction.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">function&#xA0;</span><span style="color: #ffffff">division</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">dividende</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">diviseur</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;</span><span style="color: #ffffff">dividende&#xA0;</span><span style="color: #ffcc00">/&#xA0;</span><span style="color: #ffffff">diviseur</span><span style="color: #ffcc00">;
<br/>}
<br/></span><span style="color: #8c8c8c">//&#xA0;5
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">division</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">10</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">2</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Les arguments peuvent &#xEA;tre optionnels en leur affectant une valeur dans la signature.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">function&#xA0;</span><span style="color: #ffffff">division</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">dividende&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">1</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">diviseur&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">1</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;</span><span style="color: #ffffff">dividende&#xA0;</span><span style="color: #ffcc00">/&#xA0;</span><span style="color: #ffffff">diviseur</span><span style="color: #ffcc00">;
<br/>}
<br/></span><span style="color: #8c8c8c">//&#xA0;10
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">division</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">10</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-warning">
        <strong>ECMAScript 2015</strong>
        <p>Les arguments d'une fonction ayant une valeur affect&#xE9;e dans sa signature sont compatibles &#xE0; partir de la 6&#xE8;me &#xE9;dition de ECMAScript. Par exemple ils sont disponibles pour le navigateur de Microsoft uniquement &#xE0; partir de Edge et poseront un probl&#xE8;me de compatibilit&#xE9; avec Internet Explorer.</p>
      </div>
      <div class="content-box">
        <h4>La propri&#xE9;t&#xE9; arguments</h4>
        <p>Il est possible de ne pas d&#xE9;clarer d'arguments dans la signature d'une fonction et d'utiliser arguments &#xE0; leur place.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">function&#xA0;</span><span style="color: #ffffff">maFonction</span><span style="color: #ffcc00">()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;for&#xA0;(var&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">l&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">arguments</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">length</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">&lt;&#xA0;</span><span style="color: #ffffff">l</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">++)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">arguments</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">]);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>}
<br/></span><span style="color: #8c8c8c">//&#xA0;arg1&#xA0;arg2&#xA0;arg3
<br/></span><span style="color: #ffffff">maFonction</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"arg1"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"arg2"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"arg3"</span><span style="color: #ffcc00">);</span>
</span>
</code>
      </div>
      <div class="content-warning">
        <strong>Deprecated</strong>
        <p>La variable locale arguments d'une fonction bien que compatible pour l'ensemble des navigateurs est d&#xE9;pr&#xE9;ci&#xE9;e et en cours d'&#xE9;radication.</p>
      </div>
      <h3 id="c_05_anonyme">Les fonctions anonymes</h3>
      <div class="content-box">
        <h4>Fonction anonyme</h4>
        <p>Une fonction anonyme est une fonction qui n'est pas nomm&#xE9;e. Si une instruction de fonction n'est pas nomm&#xE9;e, l'objet ne peut pas &#xEA;tre cr&#xE9;&#xE9; au runtime sans son identifiant et provoque une erreur de syntaxe.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #8c8c8c">//&#xA0;SyntaxError:&#xA0;function&#xA0;statement&#xA0;requires&#xA0;a&#xA0;name
<br/></span><span style="color: #ffcc00">function&#xA0;()&#xA0;{
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Une fonction anonyme doit obligatoirement &#xEA;tre stock&#xE9;e, que ce soit dans des parenth&#xE8;ses de priorit&#xE9; ou dans une variable.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">(function&#xA0;()&#xA0;{
<br/>});</span>
</span>
</code>
      </div>
      <h3 id="c_05_ief">Fonction ex&#xE9;cut&#xE9;e imm&#xE9;diatement</h3>
      <div class="content-box">
        <h4>IIFE</h4>
        <p>Une fonction invoqu&#xE9;e imm&#xE9;diatement est une expression invoquant une fonction nomm&#xE9;e ou anonyme, elle s'ex&#xE9;cute dans la m&#xEA;me instruction que celle de la d&#xE9;claration puis du stockage de la fonction.</p>
      </div>
      <div class="content-code">
        <strong>Immediately-Invoked Function Expression</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">(function&#xA0;()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;IIFE
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"IIFE"</span><span style="color: #ffcc00">)
<br/>})();</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Les parenth&#xE8;ses entourant la fonction remplacent la variable de stockage d'une d&#xE9;claration de fonction, son invocation se fait de la m&#xEA;me mani&#xE8;re en utilisant les parenth&#xE8;ses d'ex&#xE9;cution apr&#xE8;s son manipulateur. Le passage d'arguments se fait de la m&#xEA;me mani&#xE8;re, soit par l'objet arguments d&#xE9;pr&#xE9;ci&#xE9; soit en d&#xE9;clarant des arguments dans sa signature.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">(function&#xA0;(</span><span style="color: #ffffff">argument</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;Hello
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">argument</span><span style="color: #ffcc00">)
<br/>})(</span><span style="color: #2aa198">"Hello"</span><span style="color: #ffcc00">);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>L'utilit&#xE9; des IIFE est multiple, afin de ne pas polluer l'espace global de variables ou de fonctions inutiles, afin d'ex&#xE9;cuter une instruction unique et dont on ne d&#xE9;sire plus avoir acc&#xE8;s par la suite par exemple, nous en utiliserons souvent dans les prochains chapitres.</p>
      </div>
      <h3 id="c_05_closure">Les closures</h3>
      <div class="content-box">
        <h4>Les closures</h4>
        <p>Les closures ou les fermetures sont des fonctions internes &#xE0; une autre fonction permettant d'encapsuler un contexte et d'avoir acc&#xE8;s &#xE0; des membres priv&#xE9;s et donc inaccessibles depuis l'ext&#xE9;rieur de la fonction o&#xF9; ils sont encapsul&#xE9;s.</p>
      </div>
      <div class="content-code">
        <strong>Closure</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #8c8c8c">//&#xA0;Closure
<br/></span><span style="color: #ffcc00">(function&#xA0;()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;function&#xA0;()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"Closure"</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>})()();</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Une closure peut conserver le contexte du premier appel de la fonction o&#xF9; elle est encapsul&#xE9;e. Dans l'exemple ci-dessous la closure est affect&#xE9;e &#xE0; une variable de la m&#xEA;me fa&#xE7;on que pendant une d&#xE9;claration de fonction, sauf qu'elle conserve l'acc&#xE8;s &#xE0; la variable d&#xE9;clar&#xE9;e dans l'IIFE. N'oublions pas qu'en utilisant le mot var dans une fonction sa port&#xE9;e est locale et n'est pas visible en dehors de la fonction.</p>
      </div>
      <div class="content-code">
        <strong>Membre priv&#xE9;</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">bonjour&#xA0;</span><span style="color: #ffcc00">=&#xA0;(function&#xA0;()&#xA0;{
<br/>
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">variablePrive&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #2aa198">"Hello"</span><span style="color: #ffcc00">;
<br/>
<br/>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;function&#xA0;(</span><span style="color: #ffffff">argument</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;</span><span style="color: #ffffff">variablePrive&#xA0;</span><span style="color: #ffcc00">+&#xA0;</span><span style="color: #2aa198">"&#xA0;"&#xA0;</span><span style="color: #ffcc00">+&#xA0;</span><span style="color: #ffffff">argument</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;};
<br/>
<br/>})();
<br/>
<br/></span><span style="color: #8c8c8c">//&#xA0;Hello&#xA0;World
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">bonjour</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"World"</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>Module</strong>
        <p>Les closures sont tr&#xE8;s pr&#xE9;sentes en JavaScript. Le patron de conception Module illustre l'utilit&#xE9; des closures</p>
      </div>
      <div class="content-code">
        <strong>Module</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">bonjour&#xA0;</span><span style="color: #ffcc00">=&#xA0;(function(){
<br/>
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">en&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #2aa198">"Hello"</span><span style="color: #ffcc00">;
<br/>
<br/>&#xA0;&#xA0;&#xA0;&#xA0;function&#xA0;</span><span style="color: #ffffff">bonjour</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">lang</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">sujet</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;</span><span style="color: #ffffff">lang&#xA0;</span><span style="color: #ffcc00">+&#xA0;</span><span style="color: #2aa198">"&#xA0;"&#xA0;</span><span style="color: #ffcc00">+&#xA0;</span><span style="color: #ffffff">sujet</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>
<br/>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">en</span><span style="color: #ffcc00">:&#xA0;function(</span><span style="color: #ffffff">sujet</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;</span><span style="color: #ffffff">bonjour</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">en</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">sujet</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>&#xA0;&#xA0;&#xA0;&#xA0;};
<br/>
<br/>})();
<br/>
<br/></span><span style="color: #8c8c8c">//&#xA0;Hello&#xA0;World
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">bonjour</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">en</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"World"</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <h4>Les patrons de conception</h4>
        <p>Les patrons de conception ou les design pattern sont des motifs de conception proposant de r&#xE9;pondre aux probl&#xE9;matiques de la programmation et s'appliquent principalement &#xE0; la programmation objet. Depuis 1994 il y a 23 patrons reconnus divis&#xE9;s en 3 familles, de construction, structuraux et comportementaux.</p>
      </div>
      <h3 id="c_06_string">Accesseur et Mutateur</h3>
      <div class="content-box">
        <h4>Accesseurs</h4>
        <p>Les objets litt&#xE9;raux peuvent utiliser l'op&#xE9;rateur get pour invoquer une fonction lors de l'appel &#xE0; une propri&#xE9;t&#xE9;.</p>
      </div>
      <div class="content-code">
        <strong>Accesseurs</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">bonjour&#xA0;</span><span style="color: #ffcc00">=&#xA0;(function(){
<br/>&#xA0;&#xA0;&#xA0;&#xA0;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">en&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #2aa198">"Hello"</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">get&#xA0;en</span><span style="color: #ffcc00">()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;</span><span style="color: #ffffff">en</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>&#xA0;&#xA0;&#xA0;&#xA0;};
<br/>
<br/>})();
<br/>
<br/></span><span style="color: #8c8c8c">//&#xA0;Hello
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">bonjour</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">en</span><span style="color: #ffcc00">);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <h4>Mutateurs</h4>
        <p>Les objets litt&#xE9;raux peuvent utiliser l'op&#xE9;rateur set pour invoquer une fonction portant exactement un argument lors de l'appel &#xE0; une propri&#xE9;t&#xE9;.</p>
      </div>
      <div class="content-code">
        <strong>Mutateurs</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">bonjour&#xA0;</span><span style="color: #ffcc00">=&#xA0;(function(){
<br/>&#xA0;&#xA0;&#xA0;&#xA0;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">en&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #2aa198">"Hello"</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">set&#xA0;en</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">message</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">en&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">message</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">en</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>&#xA0;&#xA0;&#xA0;&#xA0;};
<br/>
<br/>})();
<br/>
<br/></span><span style="color: #8c8c8c">//&#xA0;Hi
<br/></span><span style="color: #ffffff">bonjour</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">en&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #2aa198">"Hi"</span><span style="color: #ffcc00">;</span>
</span>
</code>
      </div>
    </div>
  </body>
</html>