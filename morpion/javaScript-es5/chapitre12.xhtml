<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="fr">
  <head>
    <title>Chapitre 12: L'objet Event - Formation JavaScript Initiation</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <link rel="stylesheet" type="text/css" href="css/33d0c34f96e6afed4baa666fd7bfab67.css" media="all"/>
    <link rel="stylesheet" type="text/css" href="css/f786f0fa752fdc2603a99d15b85cb5fd.css" media="all and (orientation: portrait)"/>
  </head>
  <body>
    <div class="chapitre-content" id="ch_12">
      <h2>
        <span>Chapitre 12:</span>
        <a>L'objet Event</a>
      </h2>
      <div class="content-box">
        <strong>Les &#xE9;v&#xE8;nements</strong>
        <p>Apr&#xE8;s avoir introduit la notion d'&#xE9;v&#xE8;nement au chapitre pr&#xE9;c&#xE9;dent, ce chapitre continuera &#xE0; d&#xE9;tailler l'utilisation d'&#xE9;couteurs avant de se pencher sur l'objet Event.</p>
      </div>
      <h3 id="c_12_listeners">Affecter un handler</h3>
      <div class="content-box">
        <h4>Propri&#xE9;t&#xE9;s</h4>
        <p>Les handlers peuvent &#xEA;tres d&#xE9;clar&#xE9;s en tant qu'attribut de balise, et sont donc d&#xE9;finissables via les propri&#xE9;t&#xE9;s d'un objet. Nous initions un document dont la balise script ne contient plus l'attribut defer, nous pouvons maintenant d&#xE9;tecter le chargement du document en utilisant les &#xE9;v&#xE8;nements.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">&lt;</span><span style="color: #ffffff">html</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">head</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">script&#xA0;type</span><span style="color: #ffcc00">=</span><span style="color: #2aa198">"text/javascript"&#xA0;</span><span style="color: #ffffff">src</span><span style="color: #ffcc00">=</span><span style="color: #2aa198">"script.js"</span><span style="color: #ffcc00">&gt;&lt;/</span><span style="color: #ffffff">script</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/</span><span style="color: #ffffff">head</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">body</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">h1&#xA0;id</span><span style="color: #ffcc00">=</span><span style="color: #2aa198">"identifiant"</span><span style="color: #ffcc00">&gt;&lt;</span><span style="color: #ffffff">span</span><span style="color: #ffcc00">&gt;</span><span style="color: #ffffff">Text&#xA0;node</span><span style="color: #ffcc00">&lt;/</span><span style="color: #ffffff">span</span><span style="color: #ffcc00">&gt;&lt;/</span><span style="color: #ffffff">h1</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/</span><span style="color: #ffffff">body</span><span style="color: #ffcc00">&gt;
<br/>&lt;/</span><span style="color: #ffffff">html</span><span style="color: #ffcc00">&gt;</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>onreadystatechange</strong>
        <p>La propri&#xE9;t&#xE9; onreadystatechange supporte l'&#xE9;v&#xE8;nement de changement d'&#xE9;tat de son objet. En affectant une fonction de rappel &#xE0; cette propri&#xE9;t&#xE9; il est possible de d&#xE9;tecter les &#xE9;tapes du chargement du document. Le statut "interactive" correspond &#xE0; un document dont toutes les ressources ne sont pas encore charg&#xE9;es mais il est possible d'interagir avec. Le statut "complete" indique que tous les &#xE9;l&#xE9;ments sont charg&#xE9;s. Il est aussi possible d&#x2019;utiliser la propri&#xE9;t&#xE9; load de window pour d&#xE9;tecter le chargement d'un document.</p>
      </div>
      <div class="content-code">
        <strong>onreadystatechange</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onreadystatechange&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;interactive
<br/>&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;complete
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">readyState</span><span style="color: #ffcc00">);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>Collection d'&#xE9;couteurs</strong>
        <p>En affectant directement un handler &#xE0; la propri&#xE9;t&#xE9; soutenant un &#xE9;v&#xE8;nement il est possible d'attacher une seule fonction contrairement &#xE0; addEventListener. Le script ci-dessous attache une fonction de rappel pour l'&#xE9;v&#xE8;nement clic &#xE0; l'&#xE9;l&#xE9;ment qui poss&#xE8;de l'id identifiant et invoque plusieurs &#xE9;couteurs.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onreadystatechange&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(</span><span style="color: #ffffff">window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">readyState&#xA0;</span><span style="color: #ffcc00">===&#xA0;</span><span style="color: #2aa198">"complete"</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">elementEvents</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">init</span><span style="color: #ffcc00">();
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>}
<br/>
<br/>var&#xA0;</span><span style="color: #ffffff">elementEvents&#xA0;</span><span style="color: #ffcc00">=(function&#xA0;()&#xA0;{
<br/>
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">element</span><span style="color: #ffcc00">,
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">clickEvent&#xA0;</span><span style="color: #ffcc00">=&#xA0;[];
<br/>
<br/>&#xA0;&#xA0;&#xA0;&#xA0;function&#xA0;</span><span style="color: #ffffff">click</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;for&#xA0;(var&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">length&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">clickEvent</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">length</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">&lt;&#xA0;</span><span style="color: #ffffff">length</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">++)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">clickEvent</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">](</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>
<br/>&#xA0;&#xA0;&#xA0;&#xA0;function&#xA0;</span><span style="color: #ffffff">hello</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"Hello"</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>
<br/>&#xA0;&#xA0;&#xA0;&#xA0;function&#xA0;</span><span style="color: #ffffff">world</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"World"</span><span style="color: #ffcc00">);&#xA0;&#xA0;&#xA0;&#xA0;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>&#xA0;&#xA0;&#xA0;&#xA0;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">init</span><span style="color: #ffcc00">:&#xA0;function&#xA0;()&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">clickEvent</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">push</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">hello</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">world</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">element&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">getElementById</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"identifiant"</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">element</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onclick&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">click</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;Hello
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;World
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">element</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">click</span><span style="color: #ffcc00">();
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>
<br/>&#xA0;&#xA0;&#xA0;&#xA0;};
<br/>
<br/>})();
<br/></span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Si on ne peut attacher qu'une seule fonction de rappel il est possible que cette fonction en invoque plusieurs, l&#x2019;inconv&#xE9;nient de cette solution est surtout que le contexte de l'objet n'est pas le m&#xEA;me dans les fonctions appartenant &#xE0; la collection, nous aborderons les contextes plus tard. Si une solution est offerte avec addEventListener, il est possible de s'en passer mais cela impose de cr&#xE9;er un gestionnaire. Notons dans l'exemple ci dessus que la m&#xE9;thode click de l'&#xE9;l&#xE9;ment d&#xE9;clenche un clic utilisateur sur l'&#xE9;l&#xE9;ment, cette m&#xE9;thode n'est disponible que sur les &#xE9;l&#xE9;ments du DOM.</p>
      </div>
      <h3 id="c_12_event">L'objet Event</h3>
      <div class="content-box">
        <h4>Event</h4>
        <p>Pour chaque m&#xE9;thode de rappel nous avons d&#xE9;clar&#xE9; un argument nomm&#xE9; event dans leur signature. Le nommage de ce parametre est libre, il contient l'&#xE9;v&#xE8;nement qui transite jusqu'&#xE0; la fonction.</p>
      </div>
      <div class="content-code">
        <strong>argument event</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onreadystatechange&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">readyState&#xA0;</span><span style="color: #ffcc00">===&#xA0;</span><span style="color: #2aa198">"complete"</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;Event&#xA0;readystatechange
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <h4>Event</h4>
        <p>L'objet Event qui transite en argument n'est pas disponible pour les versions d'Internet Explorer inf&#xE9;rieure &#xE0; 9. L'objet est accessible comme propri&#xE9;t&#xE9; de window qui contient le dernier &#xE9;v&#xE8;nement d&#xE9;clench&#xE9;. Pour &#xEA;tre retro compatible il faut v&#xE9;rifier la pr&#xE9;sence de l'argument.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">function&#xA0;</span><span style="color: #ffffff">handler</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">||&#xA0;</span><span style="color: #ffffff">window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">;
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>Constructeur</strong>
        <p>Event peut &#xEA;tre construit pour obtenir une instance d'un &#xE9;v&#xE8;nement. Le premier param&#xE8;tre est une chaine de caract&#xE8;res d&#xE9;crivant le type de l'&#xE9;v&#xE8;nement, le deuxi&#xE8;me param&#xE8;tre optionnel est un objet contenant les options de l'&#xE9;v&#xE8;nement. Si le deuxi&#xE8;me param&#xE8;tre n'est pas un objet ou que le premier param&#xE8;tre n'est pas fourni une exception de type TypeError est lev&#xE9;e.</p>
      </div>
      <div class="content-syntaxe">
        <em>var event = new Event(type[, option]);</em>
      </div>
      <div class="content-code">
        <strong>Event</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #8c8c8c">//&#xA0;Event&#xA0;click
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(new&#xA0;</span><span style="color: #ffffff">Event</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"click"</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>dispatchEvent</strong>
        <p>Nous avons utilis&#xE9; la m&#xE9;thode click sur un &#xE9;l&#xE9;ment du DOM pour d&#xE9;clencher (trigger) un &#xE9;v&#xE8;nement, mais sur un objet qui n'est pas un &#xE9;l&#xE9;ment il faut utiliser la m&#xE9;thode dispatchEvent de l'objet. La m&#xE9;thode l&#xE8;ve une exception de type TypeError si le param&#xE8;tre n'est pas un &#xE9;v&#xE8;nement, elle renvoie true si aucune fonction n'appelle la m&#xE9;thode preventDefault (qui stoppe l'&#xE9;v&#xE8;nement).</p>
      </div>
      <div class="content-syntaxe">
        <em>var bool = objet.dispatchEvent(event);</em>
      </div>
      <div class="content-code">
        <strong>dispatchEvent</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onclick&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"click"</span><span style="color: #ffcc00">);
<br/>};
<br/></span><span style="color: #8c8c8c">//&#xA0;click
<br/>//&#xA0;true
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">dispatchEvent</span><span style="color: #ffcc00">(new&#xA0;</span><span style="color: #ffffff">Event</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"click"</span><span style="color: #ffcc00">)));</span>
</span>
</code>
      </div>
      <h3 id="c_12_propriete">Propri&#xE9;t&#xE9;s de Event</h3>
      <div class="content-box">
        <p>Nous allons &#xE9;tudier quelques propri&#xE9;t&#xE9;s de l'objet Event, la cible de l'&#xE9;v&#xE8;nement, sa phase puis introduire son bouillonnement.</p>
        <strong>target</strong>
        <p>La propri&#xE9;t&#xE9; target renvoie la cible qui a d&#xE9;clench&#xE9; l'&#xE9;v&#xE8;nement, ce n'est pas pour autant qu'il s&#x2019;agit de l'objet qui a affect&#xE9; un handler &#xE0; la propri&#xE9;t&#xE9; relative &#xE0; l'&#xE9;v&#xE8;nement. Cette propri&#xE9;t&#xE9; renvoie une r&#xE9;f&#xE9;rence comme pour tout objet.</p>
      </div>
      <div class="content-syntaxe">
        <em>var reference = event.target;</em>
      </div>
      <div class="content-code">
        <strong>target</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onload&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">element&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">getElementById</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"identifiant"</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">element</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onclick&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">||&#xA0;</span><span style="color: #ffffff">window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">target</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Dans le cas de notre exemple, l'&#xE9;l&#xE9;ment h1 portant identifiant en attribut de id poss&#xE8;de un handler pour sa propri&#xE9;t&#xE9; onclick, pourtant apr&#xE8;s un clic sur son contenu textuel il n'est pas la cible de l'&#xE9;v&#xE8;nement, target renvoie une r&#xE9;f&#xE9;rence vers son premier enfant de type &#xE9;l&#xE9;ment soit un span. Par contre apr&#xE8;s un clic en dehors de sa zone textuelle mais sur sa zone d&#x2019;interaction target renvoie bien l'&#xE9;l&#xE9;ment h1.</p>
      </div>
      <div class="content-tips">
        <h4>target</h4>
        <p>Pour les versions d'Internet Explorer inf&#xE9;rieures &#xE0; la 9, target n'est pas pr&#xE9;sent, le navigateur utilise la propri&#xE9;t&#xE9; srcElement. Si l'on d&#xE9;sire &#xE9;crire une instruction r&#xE9;tro compatible il faudra prendre en compte la disponibilit&#xE9; de target.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">target&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">e</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">target&#xA0;</span><span style="color: #ffcc00">||&#xA0;</span><span style="color: #ffffff">e</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">srcElement</span><span style="color: #ffcc00">;</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>currentTarget</strong>
        <p>La propri&#xE9;t&#xE9; currentTarget renvoie la cible qui a affect&#xE9; un handler &#xE0; la propri&#xE9;t&#xE9; relative &#xE0; l'&#xE9;v&#xE8;nement ou qui a enregistr&#xE9; l'&#xE9;couteur attach&#xE9; &#xE0; l'&#xE9;v&#xE8;nement.</p>
      </div>
      <div class="content-syntaxe">
        <em>var reference = event.currentTarget;</em>
      </div>
      <div class="content-code">
        <strong>currentTarget</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onload&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">element&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">getElementById</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"identifiant"</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">element</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onclick&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">||&#xA0;</span><span style="color: #ffffff">window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">currentTarget</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>La propri&#xE9;t&#xE9; renvoie bien le h1 quelque soit les coordonn&#xE9;es du clic de l'utilisateur sur l'&#xE9;l&#xE9;ment.</p>
      </div>
      <div class="content-box">
        <strong>eventPhase</strong>
        <p>La propri&#xE9;t&#xE9; eventPhase renvoie sous forme d'entier la phase que traverse l'&#xE9;v&#xE8;nement.</p>
      </div>
      <div class="content-syntaxe">
        <em>var phase = event.eventPhase;</em>
      </div>
      <div class="content-code">
        <strong>eventPhase</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onload&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">element&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">getElementById</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"identifiant"</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">element</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onclick&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">||&#xA0;</span><span style="color: #ffffff">window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">eventPhase</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>En cliquant sur la valeur textuelle du h1, eventPhase renvoie 3 qui correspond &#xE0; la phase o&#xF9; l'&#xE9;v&#xE8;nement se propage &#xE0; travers les anc&#xEA;tres de target. eventPhase renvoie 2 si la phase correspond &#xE0; l'objet d&#x2019;o&#xF9; sont initi&#xE9;s les &#xE9;couteurs ou le handler. eventPhase renvoie 1 si l'&#xE9;v&#xE8;nement traverse les anc&#xEA;tres de currentTarget, et renvoie 0 si l'&#xE9;v&#xE8;nement est en pr&#xE9;paration.</p>
      </div>
      <div class="content-box">
        <strong>bubbles</strong>
        <p>La propri&#xE9;t&#xE9; bubbles renvoie un boolean. Si l'&#xE9;v&#xE8;nement se propage vers le haut soit si le bouillonnement est actif elle renvoie true, sinon elle renvoie false. Par d&#xE9;faut en affectant un handler &#xE0; une propri&#xE9;t&#xE9; le bouillonnement est actif concernant les &#xE9;l&#xE9;ments.</p>
      </div>
      <div class="content-syntaxe">
        <em>var boolean = event.bubbles;</em>
      </div>
      <div class="content-code">
        <strong>bubbles</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onload&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">element&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">getElementById</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"identifiant"</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">element</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onclick&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">||&#xA0;</span><span style="color: #ffffff">window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">bubbles</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;true
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">element</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">click</span><span style="color: #ffcc00">();&#xA0;
<br/>}</span>
</span>
</code>
      </div>
      <h3 id="c_12_methode">M&#xE9;thodes de Event</h3>
      <div class="content-box">
        <p>Nous allons &#xE9;tudier quelques m&#xE9;thodes de l'objet Event, l'annulation de l'&#xE9;v&#xE8;nement et de sa propagation.</p>
        <strong>preventDefault</strong>
        <p>La m&#xE9;thode preventDefault annule l'&#xE9;v&#xE8;nement initi&#xE9;. Dans le cas d'un lien, il annule l'action de suivre le lien ou dans le cas d'un formulaire il annule son envoi.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">&lt;</span><span style="color: #ffffff">html</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">head</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">script&#xA0;type</span><span style="color: #ffcc00">=</span><span style="color: #2aa198">"text/javascript"&#xA0;</span><span style="color: #ffffff">src</span><span style="color: #ffcc00">=</span><span style="color: #2aa198">"script.js"</span><span style="color: #ffcc00">&gt;&lt;/</span><span style="color: #ffffff">script</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/</span><span style="color: #ffffff">head</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">body</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">form&#xA0;id</span><span style="color: #ffcc00">=</span><span style="color: #2aa198">"identifiant"</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">input&#xA0;type</span><span style="color: #ffcc00">=</span><span style="color: #2aa198">"submit"</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;/</span><span style="color: #ffffff">form</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/</span><span style="color: #ffffff">body</span><span style="color: #ffcc00">&gt;
<br/>&lt;/</span><span style="color: #ffffff">html</span><span style="color: #ffcc00">&gt;</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Dans le cas du formulaire ci dessus, preventDefault annule l'envoi du formulaire sans interrompre le flux d'instructions contrairement &#xE0; un return false qui emp&#xEA;cherait lui aussi l'envoi du formulaire.</p>
      </div>
      <div class="content-syntaxe">
        <em>event.preventDefault();</em>
      </div>
      <div class="content-code">
        <strong>preventDefault</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onload&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">getElementById</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"identifiant"</span><span style="color: #ffcc00">).</span><span style="color: #ffffff">onclick&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">||&#xA0;</span><span style="color: #ffffff">window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">preventDefault</span><span style="color: #ffcc00">();
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"Le&#xA0;formulaire&#xA0;n'est&#xA0;pas&#xA0;envoy&#xE9;"</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <h4>preventDefault</h4>
        <p>La m&#xE9;thode preventDefaultPour n'est pas disponible pour les versions d'Internet Explorer inf&#xE9;rieures &#xE0; la 9 qui utilise la propri&#xE9;t&#xE9; returnValue de l'objet event &#xE0; laquelle il faudra affecter false pour annuler l'&#xE9;v&#xE8;nement.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
&#xA0;&#xA0;event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">preventDefault
<br/></span><span style="color: #ffcc00">?&#xA0;</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">preventDefault</span><span style="color: #ffcc00">()
<br/>:&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">returnValue&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">false</span><span style="color: #ffcc00">);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>stopPropagation</strong>
        <p>La m&#xE9;thode stopPropagation arr&#xEA;te la propagation de l'&#xE9;v&#xE8;nement au travers du document pour les objets ayant un handler rattach&#xE9; &#xE0; l'&#xE9;v&#xE8;nement.</p>
      </div>
      <div class="content-syntaxe">
        <em>event.stopPropagation();</em>
      </div>
      <div class="content-code">
        <strong>stopPropagation</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onload&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">element&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">document</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">getElementById</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"identifiant"</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">element</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">onclick&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"Formulaire"</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">element</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">getElementsByTagName</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"input"</span><span style="color: #ffcc00">)[</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">].</span><span style="color: #ffffff">onclick&#xA0;</span><span style="color: #ffcc00">=&#xA0;function&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">event&#xA0;</span><span style="color: #ffcc00">||&#xA0;</span><span style="color: #ffffff">window</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">preventDefault
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffcc00">?&#xA0;</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">preventDefault</span><span style="color: #ffcc00">()
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;:&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">returnValue&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">false</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"Input"</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">stopPropagation</span><span style="color: #ffcc00">();
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Le handler de l'input invoque stopPropagation, l'&#xE9;v&#xE8;nement ne se propage pas jusqu'&#xE0; son &#xE9;l&#xE9;ment parent soit le formulaire qui lui aussi poss&#xE8;de un handler pour le m&#xEA;me &#xE9;v&#xE8;nement et qui devrait &#xEA;tre d&#xE9;clench&#xE9; apr&#xE8;s celui de l'input.</p>
      </div>
      <div class="content-tips">
        <h4>stopPropagation</h4>
        <p>La m&#xE9;thode stopPropagation n'est pas disponible pour les versions d'Internet Explorer inf&#xE9;rieures &#xE0; la 9 qui utilise la propri&#xE9;t&#xE9; cancelBubble de l'objet event &#xE0; laquelle il faudra affecter true pour annuler le bouillonnement.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
&#xA0;&#xA0;event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">stopPropagation
<br/></span><span style="color: #ffcc00">?&#xA0;</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">stopPropagation</span><span style="color: #ffcc00">()
<br/>:&#xA0;(</span><span style="color: #ffffff">event</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">cancelBubble&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">true</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Le prochain chapitre d&#xE9;taille la notion de propagation et de bouillonnement lorsqu'un &#xE9;v&#xE8;nement est &#xE9;mis.</p>
      </div>
    </div>
  </body>
</html>