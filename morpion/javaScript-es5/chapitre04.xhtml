<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="fr">
  <head>
    <title>Chapitre 04: Structures it&#xE9;ratives - Formation JavaScript Initiation</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <link rel="stylesheet" type="text/css" href="css/33d0c34f96e6afed4baa666fd7bfab67.css" media="all"/>
    <link rel="stylesheet" type="text/css" href="css/f786f0fa752fdc2603a99d15b85cb5fd.css" media="all and (orientation: portrait)"/>
  </head>
  <body>
    <div class="chapitre-content" id="ch_04">
      <h2>
        <span>Chapitre 04:</span>
        <a>Structures it&#xE9;ratives</a>
      </h2>
      <div class="content-box">
        <strong>It&#xE9;ration</strong>
        <p>Une it&#xE9;ration sert &#xE0; r&#xE9;p&#xE9;ter l'ex&#xE9;cution d'instructions, pour parcourir un tableau ou un objet en peu de lignes il existe des structures it&#xE9;ratives.</p>
        <p>Les structures it&#xE9;ratives sont appel&#xE9;es boucles, ce chapitre pr&#xE9;sente l'utilisation de la boucle for, for in et for of, while et do while et les instructions permettant de contr&#xF4;ler le flux d'ex&#xE9;cution.</p>
      </div>
      <h3 id="c_04_for">La boucle for</h3>
      <div class="content-box">
        <h4>La boucle for</h4>
        <p>La boucle for s'appuie sur une expression initiale, une condition et une expression d'incr&#xE9;ment pour effectuer une it&#xE9;ration. Les expressions et la condition sont optionnelles, mais sans elles il faudra v&#xE9;rifier la condition d'it&#xE9;ration &#xE0; l'int&#xE9;rieur du bloc d'instruction.</p>
      </div>
      <div class="content-syntaxe">
        <em>for ([initiale]; [condition]; [increment]) [{}]</em>
      </div>
      <div class="content-box">
        <p>L'expression initiale permet d'ex&#xE9;cuter toutes expressions utiles au contr&#xF4;le de l'it&#xE9;ration si elles n'ont pas &#xE9;t&#xE9;s ex&#xE9;cut&#xE9;es avant, dans la plupart des cas cette premi&#xE8;re expression sert &#xE0; d&#xE9;clarer une variable qui sera utilis&#xE9;e pour l'expression d&#x2019;incr&#xE9;ment en lui attribuant une valeur initiale. La condition sera &#xE9;valu&#xE9;e &#xE0; chaque it&#xE9;ration, si son &#xE9;valuation vaut true alors le for effectuera une it&#xE9;ration avant de rev&#xE9;rifier la condition. Lorsque la condition est &#xE9;valu&#xE9;e &#xE0; false alors la boucle s'arr&#xEA;te et n'effectuera plus d'it&#xE9;ration. Apr&#xE8;s chaque it&#xE9;ration et si la condition vaut true alors l'expression d'incr&#xE9;ment est ex&#xE9;cut&#xE9;e, dans la plupart des cas cette expression sert &#xE0; incr&#xE9;menter la variable d&#xE9;clar&#xE9;e dans l'expression initiale et qui est utilis&#xE9; dans la condition.</p>
      </div>
      <div class="content-code">
        <strong>Boucle for</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">for&#xA0;(var&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">&lt;&#xA0;</span><span style="color: #ffffff">5</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">++)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;0&#xA0;1&#xA0;2&#xA0;3&#xA0;4
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>Parcourir un tableau</strong>
        <p>Les &#xE9;l&#xE9;ments d'un tableau sont index&#xE9;s num&#xE9;riquement et le tableau poss&#xE8;de un attribut length. Il est possible de parcourir un tableau en utilisant comme variable d&#x2019;incr&#xE9;ment la clef d'un &#xE9;l&#xE9;ment et en utilisant en condition sa variable length.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"elem1"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"elem2"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"elem3"</span><span style="color: #ffcc00">];
<br/>
<br/>for&#xA0;(var&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">&lt;&#xA0;</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">length</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">++)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;elem1&#xA0;elem2&#xA0;elem3
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">]);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <h4>Condition</h4>
        <p>Il est important si la valeur de retour d'une condition est constante pendant la boucle de ne pas utiliser d'expression et d'utiliser sa valeur de retour &#xE0; la place. En utilisant tableau.length &#xE0; l'int&#xE9;rieur de la condition, &#xE0; chaque it&#xE9;ration la condition est v&#xE9;rifi&#xE9;e et l&#x2019;acc&#xE8;s &#xE0; la propri&#xE9;t&#xE9; length se fera inutilement, il vaut mieux stocker length  dans une variable &#xE0; utiliser dans la condition. </p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"elem1"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"elem2"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"elem3"</span><span style="color: #ffcc00">];
<br/>
<br/>for&#xA0;(var&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">l&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">length</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">&lt;&#xA0;</span><span style="color: #ffffff">l</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">++)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;elem1&#xA0;elem2&#xA0;elem3
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">]);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <p>De cette fa&#xE7;on l&#x2019;acc&#xE8;s a la variable demande moins d'effort que l&#x2019;acc&#xE8;s au tableau puis &#xE0; sa propri&#xE9;t&#xE9;, c'est une bonne pratique. Pour mieux se repr&#xE9;senter la logique d'it&#xE9;ration de la boucle for nous pouvons la repr&#xE9;senter comme &#xE7;i dessous.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">;
<br/>var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"elem1"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"elem2"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"elem3"</span><span style="color: #ffcc00">];
<br/>var&#xA0;</span><span style="color: #ffffff">length&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">length</span><span style="color: #ffcc00">;
<br/>var&#xA0;</span><span style="color: #ffffff">condition&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">true</span><span style="color: #ffcc00">;
<br/>
<br/>for&#xA0;(;&#xA0;</span><span style="color: #ffffff">condition</span><span style="color: #ffcc00">;)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">&lt;&#xA0;</span><span style="color: #ffffff">length</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;elem1&#xA0;elem2&#xA0;elem3&#xA0;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">]);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">++;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;else&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">condition&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">false</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <p>La condition est un boolean et l'expression &#xE9;valu&#xE9;e pour d&#xE9;terminer la valeur de retour de la condition doit &#xEA;tre v&#xE9;rifi&#xE9;e &#xE0; chaque it&#xE9;ration. Si la condition ne vaut jamais false alors le for boucle ind&#xE9;finiment et provoque un plantage du navigateur.</p>
      </div>
      <h3 id="c_04_forin">For in et of</h3>
      <div class="content-box">
        <h4>Le for in</h4>
        <p>La boucle for in s'appuie sur l'op&#xE9;rateur in.</p>
        <p>Il boucle sur l'objet ou le tableau en s'appuyant sur ses propri&#xE9;t&#xE9;s ou clefs en peuplant la premi&#xE8;re op&#xE9;rande du in par la propri&#xE9;t&#xE9; ou la clef rencontr&#xE9;e pendant l'it&#xE9;ration.</p>
      </div>
      <div class="content-syntaxe">
        <em>for (var key in objet) {}</em>
      </div>
      <div class="content-code">
        <strong>Boucle for in sur un objet</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">objet&#xA0;</span><span style="color: #ffcc00">=&#xA0;{&#xA0;</span><span style="color: #ffffff">prop1</span><span style="color: #ffcc00">:&#xA0;</span><span style="color: #2aa198">"valeur1"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">prop2</span><span style="color: #ffcc00">:&#xA0;</span><span style="color: #2aa198">"valeur2"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">prop3</span><span style="color: #ffcc00">:&#xA0;</span><span style="color: #2aa198">"valeur3"&#xA0;</span><span style="color: #ffcc00">};
<br/>
<br/>for&#xA0;(var&#xA0;</span><span style="color: #ffffff">key&#xA0;in&#xA0;objet</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;prop1&#xA0;prop2&#xA0;prop3
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">key</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;valeur1&#xA0;valeur2&#xA0;valeur3
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">objet</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">key</span><span style="color: #ffcc00">]);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <p>Pour acc&#xE9;der &#xE0; la propri&#xE9;t&#xE9; de l'objet dont l'identifiant est stock&#xE9; dans la premi&#xE8;re op&#xE9;rande du in il faut utiliser les crochets, comme pour les propri&#xE9;t&#xE9;s ayant comme identifiant une valeur num&#xE9;rique.</p>
      </div>
      <div class="content-code">
        <strong>Boucle for in sur un tableau</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"elem1"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"elem2"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"elem3"</span><span style="color: #ffcc00">];
<br/>
<br/>for&#xA0;(var&#xA0;</span><span style="color: #ffffff">key&#xA0;in&#xA0;tableau</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;0&#xA0;1&#xA0;2
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">key</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;elem1&#xA0;elem2&#xA0;elem3
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">key</span><span style="color: #ffcc00">]);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <h4>Le for of</h4>
        <p>La boucle for peut it&#xE9;rer tous les objets it&#xE9;rables selon leurs m&#xE9;canismes d'it&#xE9;ration. Il parcourt la seconde op&#xE9;rande sur la valeur de ses propri&#xE9;t&#xE9;s qu'il affecte &#xE0; la premi&#xE8;re op&#xE9;rande.</p>
      </div>
      <div class="content-syntaxe">
        <em>for (var value of iterable) {}</em>
      </div>
      <div class="content-code">
        <strong>Boucle for of</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"elem1"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"elem2"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"elem3"</span><span style="color: #ffcc00">];
<br/>
<br/>for&#xA0;(var&#xA0;</span><span style="color: #ffffff">value&#xA0;of&#xA0;tableau</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;elem1&#xA0;elem2&#xA0;elem3
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">value</span><span style="color: #ffcc00">);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-warning">
        <strong>ECMAScript 2015</strong>
        <p>L'instruction for of est d&#xE9;finie dans la 6&#xE8;me &#xE9;dition de l'ECMAScript, son utilisation dans le contexte d'un navigateur posera des probl&#xE8;mes de compatibilit&#xE9;. For of est disponible &#xE0; partir de la version 38 de Chrome par exemple.</p>
      </div>
      <h3 id="c_04_break">Contr&#xF4;le de l'it&#xE9;ration</h3>
      <div class="content-box">
        <h4>break</h4>
        <p>L'instruction break permet d&#x2019;arr&#xEA;ter l'ex&#xE9;cution d'une boucle.</p>
      </div>
      <div class="content-syntaxe">
        <em>break [label]</em>
      </div>
      <div class="content-code">
        <strong>break</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">for&#xA0;(var&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">&lt;&#xA0;</span><span style="color: #ffffff">5</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">++)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">===&#xA0;</span><span style="color: #ffffff">3</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;break;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;0&#xA0;1&#xA0;2
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <h4>continue</h4>
        <p>L'instruction continue permet d&#x2019;arr&#xEA;ter l'it&#xE9;ration en cours d'une boucle.</p>
      </div>
      <div class="content-syntaxe">
        <em>continue [label]</em>
      </div>
      <div class="content-code">
        <strong>continue</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">for&#xA0;(var&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">&lt;&#xA0;</span><span style="color: #ffffff">5</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">++)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">===&#xA0;</span><span style="color: #ffffff">3</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;continue;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;0&#xA0;1&#xA0;2&#xA0;4
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">);
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <h4>label</h4>
        <p>Un label permet de marquer l'instruction d'une &#xE9;tiquette pour y faire r&#xE9;f&#xE9;rence. Dans le cas de boucles imbriqu&#xE9;es, l'&#xE9;tiquette est utile pour arr&#xEA;ter la boucle ou l'it&#xE9;ration de niveau sup&#xE9;rieur.</p>
      </div>
      <div class="content-code">
        <strong>label</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
etiquette</span><span style="color: #ffcc00">:
<br/>for&#xA0;(var&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">&lt;&#xA0;</span><span style="color: #ffffff">3</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">++)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;for&#xA0;(var&#xA0;</span><span style="color: #ffffff">j&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">j&#xA0;</span><span style="color: #ffcc00">&lt;&#xA0;</span><span style="color: #ffffff">3</span><span style="color: #ffcc00">;&#xA0;</span><span style="color: #ffffff">j</span><span style="color: #ffcc00">++)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">===&#xA0;</span><span style="color: #ffffff">1</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;break&#xA0;</span><span style="color: #ffffff">etiquette</span><span style="color: #ffcc00">;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;0&#xA0;1&#xA0;2
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">j</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;}
<br/>}</span>
</span>
</code>
      </div>
      <h3 id="c_04_while">La boucle while et do while</h3>
      <div class="content-box">
        <h4>while</h4>
        <p>La boucle while it&#xE8;re tant que sa condition vaut true, elle est comparable &#xE0; la boucle for qui ne d&#xE9;clare pas d'instruction initiale et d'incr&#xE9;ment.</p>
        <p>Il faut &#xEA;tre attentif &#xE0; ne pas utiliser une condition qui n'&#xE9;volue pas au sein de la boucle sans quoi la boucle it&#xE9;rera ind&#xE9;finiment. La valeur de retour de la condition est &#xE9;valu&#xE9;e en boolean et elle peut &#xEA;tre n'importe quelle expression.</p>
      </div>
      <div class="content-syntaxe">
        <em>while (condition) [{}]</em>
      </div>
      <div class="content-code">
        <strong>Boucle while</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">;
<br/>
<br/>while&#xA0;(</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">&lt;&#xA0;</span><span style="color: #ffffff">5</span><span style="color: #ffcc00">)&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;1&#xA0;2&#xA0;3&#xA0;4
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">++;
<br/>}</span>
</span>
</code>
      </div>
      <div class="content-box">
        <h4>do while</h4>
        <p>La boucle do while it&#xE8;re tant que sa condition vaut true, elle est semblable &#xE0; while mais effectue toujours au moins une it&#xE9;ration m&#xEA;me si la condition vaut false.</p>
      </div>
      <div class="content-syntaxe">
        <em>do [{}] while (condition) [{}]</em>
      </div>
      <div class="content-code">
        <strong>Boucle do while</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">;
<br/>do&#xA0;{
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #8c8c8c">//&#xA0;0
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">);
<br/>&#xA0;&#xA0;&#xA0;&#xA0;</span><span style="color: #ffffff">i</span><span style="color: #ffcc00">++;
<br/>}
<br/>while&#xA0;(</span><span style="color: #ffffff">i&#xA0;</span><span style="color: #ffcc00">===&#xA0;</span><span style="color: #2aa198">"Hello"</span><span style="color: #ffcc00">)</span>
</span>
</code>
      </div>
    </div>
  </body>
</html>