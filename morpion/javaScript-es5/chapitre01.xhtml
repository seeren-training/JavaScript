<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="fr">
  <head>
    <title>Chapitre 01: Grammaire et syntaxe - Formation JavaScript Initiation</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <link rel="stylesheet" type="text/css" href="css/33d0c34f96e6afed4baa666fd7bfab67.css" media="all"/>
    <link rel="stylesheet" type="text/css" href="css/f786f0fa752fdc2603a99d15b85cb5fd.css" media="all and (orientation: portrait)"/>
  </head>
  <body>
    <div class="chapitre-content" id="ch_01">
      <h2>
        <span>Chapitre 01:</span>
        <a>Grammaire et syntaxe</a>
      </h2>
      <div class="content-box">
        <strong>D&#xE9;butons avec JavaScript!</strong>
        <p>JavaScript est un langage de programmation de scripts, il peut s'ex&#xE9;cuter sur le poste d'un client plus pr&#xE9;cis&#xE9;ment sur un navigateur web pour dynamiser les pages d'un site internet par exemple. Nous allons en introduction apprendre &#xE0; relier un fichier JavaScript &#xE0; une page web avant de manipuler le langage. La d&#xE9;claration de variables et de constantes, de tableaux et de litt&#xE9;raux ou l'&#xE9;tude des types seront les points que nous passerons en revue dans ce premier chapitre.</p>
      </div>
      <h3 id="c_01_intro">Introduction au langage</h3>
      <div class="content-box">
        <h4>La balise script</h4>
        <p>Le tag HTML script nous sert &#xE0; d&#xE9;clarer un script, il poss&#xE8;de les attributs charset, type, src, defer et async. La balise se place dans la section head de pr&#xE9;f&#xE9;rence, si le doctype du document n'est pas en HTML5 l'attribut type doit avoir comme valeur "text/javascript", sinon il peut &#xEA;tre omis.</p>
      </div>
      <div class="content-code">
        <strong>La balise script dans un document HTML5</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">&lt;!</span><span style="color: #ffffff">DOCTYPE&#xA0;html</span><span style="color: #ffcc00">&gt;
<br/>&lt;</span><span style="color: #ffffff">html</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">head</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">script&#xA0;type</span><span style="color: #ffcc00">=</span><span style="color: #2aa198">"text/javascript"</span><span style="color: #ffcc00">&gt;&lt;/</span><span style="color: #ffffff">script</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/</span><span style="color: #ffffff">head</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;</span><span style="color: #ffffff">body</span><span style="color: #ffcc00">&gt;
<br/>&#xA0;&#xA0;&#xA0;&#xA0;&lt;/</span><span style="color: #ffffff">body</span><span style="color: #ffcc00">&gt;
<br/>&lt;/</span><span style="color: #ffffff">html</span><span style="color: #ffcc00">&gt;</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>L'attribut source</strong>
        <p>Un script peut &#xEA;tre distant et ne pas figurer dans la balise script. L'attribut source sert &#xE0; renseigner la source d'un script distant &#xE0; rattacher &#xE0; la balise. Nous cr&#xE9;ons dans le m&#xEA;me r&#xE9;pertoire un fichier script.js que nous pouvons appeler via l'attribut source.</p>
      </div>
      <div class="content-code">
        <strong>L'attribut source pour inclure un script distant</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">&lt;</span><span style="color: #ffffff">script&#xA0;type</span><span style="color: #ffcc00">=</span><span style="color: #2aa198">"text/javascript"&#xA0;</span><span style="color: #ffffff">src</span><span style="color: #ffcc00">=</span><span style="color: #2aa198">"script.js"</span><span style="color: #ffcc00">&gt;&lt;/</span><span style="color: #ffffff">script</span><span style="color: #ffcc00">&gt;</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>La console</strong>
        <p>Les navigateurs poss&#xE8;dent une console que JavaScript peut utiliser. En utilisant le raccourci f12 ou en passant par outils/outils de d&#xE9;veloppement, le panneau d'aide au d&#xE9;veloppement s'ouvre et poss&#xE8;de un onglet console qui sert &#xE0; visualiser les sorties de la console du navigateur.</p>
        <p>Notre console est ouverte et nous avons un script distant. Nous pouvons maintenant &#xE9;crire notre premi&#xE8;re ligne de code dans le fichier script.js afin d'afficher dans la console "Hello World". La m&#xE9;thode console.log() affiche une sortie textuelle.</p>
      </div>
      <div class="content-code">
        <strong>Hello World</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"Hello&#xA0;World"</span><span style="color: #ffcc00">);</span>
</span>
</code>
      </div>
      <h3 id="c_01_declaration">D&#xE9;claration et assignation</h3>
      <div class="content-box">
        <h4>Les variables</h4>
        <p>Les variables sont des pointeurs d&#xE9;signant des valeurs utilis&#xE9;es. Le nom d'une variable est un identifiant qui doit commencer par une lettre minuscule ou majuscule, un tiret bas ou un dollar, il peut ensuite comporter les caract&#xE8;res nomm&#xE9;s mais aussi des chiffres. Une variable peut &#xEA;tre globale ou locale quand elle est d&#xE9;clar&#xE9;e dans un bloc.</p>
      </div>
      <div class="content-syntaxe">
        <em>var maVar [= valeur1 [, maVar2 [, maVar3 ... [, maVarN]]]];</em>
      </div>
      <div class="content-box">
        <p>Il est possible de d&#xE9;clarer plusieurs variables en utilisant une fois le mot var puis en s&#xE9;parant les variables par des virgules. Un point virgule doit &#xEA;tre pr&#xE9;sent &#xE0; la fin de l'instruction mais s'il est oubli&#xE9; JavaScript le rajoute automatiquement. Si une variable est d&#xE9;clar&#xE9;e sans le mot var elle est implicitement globale et cette &#xE9;criture peut g&#xE9;n&#xE9;rer un avertissement en mode strict, de ce fait il est conseill&#xE9; d'utiliser le mot var pour chaque d&#xE9;claration de variable. La bonne pratique pour le nommage d'une variable consiste &#xE0; utiliser le CamelCase, mettre en majuscule la premi&#xE8;re lettre des mots li&#xE9;s.</p>
      </div>
      <div class="content-code">
        <strong>D&#xE9;claration d'une variable</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">message&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #2aa198">"Hello&#xA0;World"</span><span style="color: #ffcc00">;</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <h4>Ex&#xE9;cution</h4>
        <p>En n'utilisant pas le mot var, la variable est implicitement globale mais pas seulement, la gestion m&#xE9;moire de cette variable diff&#xE8;re &#xE9;galement. Admettons que nous loggons la variable avant de l'avoir d&#xE9;clar&#xE9;e, la variable existe pour l'identifiant logg&#xE9; et son type est ind&#xE9;fini.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #8c8c8c">//&#xA0;undefined
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">message</span><span style="color: #ffcc00">);
<br/>var&#xA0;</span><span style="color: #ffffff">message&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #2aa198">"Hello&#xA0;World"</span><span style="color: #ffcc00">;</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <p>En revanche en n'utilisant pas le mot var, la variable n'existe pas avant sa d&#xE9;claration et le log d&#xE9;clenche une erreur.</p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #8c8c8c">//&#xA0;ReferenceError:&#xA0;message&#xA0;is&#xA0;not&#xA0;defined
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">message</span><span style="color: #ffcc00">);
<br/></span><span style="color: #ffffff">message&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #2aa198">"Hello&#xA0;World"</span><span style="color: #ffcc00">;</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <p>En utilisant le mot var un pointeur d&#xE9;fini la variable au parsetime et sa valeur est affect&#xE9;e au runtime, juste avant l'ex&#xE9;cution de l'instruction. En n'utilisant pas le mot var, la variable est cr&#xE9;&#xE9;e et sa valeur est affect&#xE9;e au runtime. En utilisant ou pas le mot var nous observons que JavaScript passe deux fois sur le script, la deuxi&#xE8;me fois le code est compil&#xE9; &#xE0; la vol&#xE9;e par les navigateurs modernes.</p>
      </div>
      <div class="content-box">
        <h4>Les constantes</h4>
        <p>L'identifiant d'une constante repose sur les m&#xEA;mes r&#xE8;gles que celui d'une variable, la bonne pratique du nommage consiste &#xE0; utiliser des capitales pour l'identifiant avec des tirets comme s&#xE9;parateurs. Une valeur est obligatoirement affect&#xE9;e &#xE0; une constante contrairement &#xE0; une variable.</p>
      </div>
      <div class="content-syntaxe">
        <em>const CONST = valeur1 [, CONST_2 = valeur2 [, ... [, CONST_N = valeurN]]];</em>
      </div>
      <div class="content-box">
        <p>Il n'est pas possible de modifier la valeur d'une constante sans provoquer une erreur. </p>
      </div>
      <div class="content-code">
        <strong>D&#xE9;claration d'une constante</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">const&#xA0;</span><span style="color: #ffffff">MA_CONST&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #2aa198">"Hello&#xA0;World"</span><span style="color: #ffcc00">;</span>
</span>
</code>
      </div>
      <div class="content-warning">
        <strong>ECMAScript 2015</strong>
        <p>Les constantes sont introduites dans l'ECMAScript 2015 (6th Edition, ECMA-262) ce qui pose un probl&#xE8;me de compatibilit&#xE9; dans le contexte d'un navigateur. Par exemple c'est &#xE0; partir d'Internet Explorer 11 que l'utilisation des constantes ne provoquera pas de probl&#xE8;me de compatibilit&#xE9;, pour les versions inf&#xE9;rieures cela provoquera une erreur de syntaxe!</p>
      </div>
      <h3 id="c_01_type">Les types et leur conversion</h3>
      <div class="content-box">
        <h4>Les types</h4>
        <p>Il existe 6 types primitifs et un type pour les objets. JavaScript &#xE9;tant un langage faiblement typ&#xE9; il g&#xE8;re le typage dynamiquement, une variable ne doit pas d&#xE9;clarer son type et peut en changer.</p>
      </div>
      <ul class="content-list">
        <li>Le boolean</li>
        <li>Le nombre</li>
        <li>La chaine de caract&#xE8;res</li>
        <li>Le nul</li>
        <li>L'ind&#xE9;fini</li>
        <li>Le symbole</li>
        <li>L'objet</li>
      </ul>
      <div class="content-box">
        <strong>Boolean</strong>
        <p>Le boolean contient la valeur false ou true. La conversion en nombre donne 0 ou 1, en chaine de caract&#xE8;res "false" ou "true" et en objet il correspond &#xE0; l'objet Boolean.</p>
      </div>
      <div class="content-code">
        <strong>Conversion du boolean</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">type_boolean&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">false</span><span style="color: #ffcc00">;
<br/></span><span style="color: #8c8c8c">//0
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Number</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_boolean</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//false
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">String</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_boolean</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//Boolean&#xA0;{}
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Object</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_boolean</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>Number</strong>
        <p>Le nombre contient un entier ou un d&#xE9;cimal. La conversion en boolean donne true si le nombre est diff&#xE9;rent de 0, en chaine de caract&#xE8;res sa valeur devient de type string et en objet il correspond &#xE0; l'objet Number.</p>
      </div>
      <div class="content-code">
        <strong>Conversion du nombre</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">type_number&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">0.1</span><span style="color: #ffcc00">;
<br/></span><span style="color: #8c8c8c">//true
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Boolean</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_number</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//0.1
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">String</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_number</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//Number&#xA0;{}
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Object</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_number</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>String</strong>
        <p>La chaine de caract&#xE8;res contient aucun ou plusieurs caract&#xE8;res. La conversion en boolean donne true si la chaine n'est pas vide, en nombre sa valeur devient NaN (Not a Number) et est de type nombre et en objet il correspond &#xE0; l'objet String.</p>
      </div>
      <div class="content-code">
        <strong>Conversion de la chaine de caract&#xE8;res</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">type_string&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #2aa198">"Hello"</span><span style="color: #ffcc00">;
<br/></span><span style="color: #8c8c8c">//true
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Boolean</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_string</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//NaN
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Number</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_string</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//String&#xA0;{&#xA0;0="H",&#xA0;&#xA0;1="e",&#xA0;&#xA0;2="l",&#xA0;&#xA0;3="l",&#xA0;4="o"&#xA0;}
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Object</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_string</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>Null</strong>
        <p>La null contient exclusivement la valeur null. La conversion en boolean donne false, en nombre sa valeur est 0, en chaine de caract&#xE8;res sa valeur devient de type string et en objet il correspond &#xE0; l'objet Object.</p>
      </div>
      <div class="content-code">
        <strong>Conversion du null</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">type_null&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">null</span><span style="color: #ffcc00">;
<br/></span><span style="color: #8c8c8c">//false
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Boolean</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_null</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//0
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Number</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_null</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//null
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">String</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_null</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//Object&#xA0;{}
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Object</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_null</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>Undefined</strong>
        <p>Le type ind&#xE9;fini contient exclusivement la valeur undefined. La conversion en boolean donne false, en nombre sa valeur devient NaN (Not a Number), en chaine de caract&#xE8;res sa valeur devient de type string et en objet il correspond &#xE0; l'objet Object.</p>
      </div>
      <div class="content-code">
        <strong>Conversion du type ind&#xE9;fini</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">type_undefined&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">undefined</span><span style="color: #ffcc00">;
<br/></span><span style="color: #8c8c8c">//false
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Boolean</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_undefined</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//NaN
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Number</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_undefined</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//undefined
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">String</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_undefined</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//Object&#xA0;{}
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Object</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_undefined</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-warning">
        <strong>Symbol</strong>
        <p>Le Symbol est un objet qui contient le type de donn&#xE9;es primitif symbole et peut s'utiliser pour contenir des identifiants, Symbol est introduit dans l'ECMAScript 6. La conversion en boolean donne true, sa conversion en nombre entraine une erreur, en chaine de caract&#xE8;res sa valeur devient sa signature de type string et en objet il correspond &#xE0; l'objet Symbol.</p>
      </div>
      <div class="content-code">
        <strong>Conversion du symbole</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">type_symbole&#xA0;</span><span style="color: #ffcc00">=&#xA0;</span><span style="color: #ffffff">Symbol</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"symbol"</span><span style="color: #ffcc00">);
<br/></span><span style="color: #8c8c8c">//true
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Boolean</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_symbole</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//TypeError:&#xA0;can't&#xA0;convert&#xA0;symbol&#xA0;to&#xA0;number
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Number</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_symbole</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//Symbol(symbol)
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">String</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_symbole</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//&#xA0;Symbol&#xA0;{}
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Object</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_symbole</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>Object</strong>
        <p>La conversion d'un objet en boolean donne true, en nombre sa valeur devient NaN (Not a Number), en chaine de caract&#xE8;res sa valeur devient son type entre crochet de type string.</p>
      </div>
      <div class="content-code">
        <strong>Conversion de l'objet</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">type_object&#xA0;</span><span style="color: #ffcc00">=&#xA0;{};
<br/></span><span style="color: #8c8c8c">//true
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Boolean</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_object</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//NaN
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">Number</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_object</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//[object&#xA0;Object]
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">String</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">type_object</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <h3 id="c_01_array">Les tableaux, d&#xE9;claration et manipulation</h3>
      <div class="content-box">
        <h4>Les tableaux</h4>
        <p>Le tableau est un type d'objet, il sert &#xE0; stocker des valeurs dans un ordre d&#xE9;fini et peut s'apparenter &#xE0; une liste. Il y a deux &#xE9;critures possibles pour d&#xE9;clarer un tableau, quelque soit le type de d&#xE9;claration choisi, son utilisation est identique.</p>
      </div>
      <div class="content-syntaxe">
        <em>var tableau = [element0, element1, ..., elementN];</em>
      </div>
      <div class="content-code">
        <strong>Tableau litt&#xE9;ral</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"element0"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"element1"</span><span style="color: #ffcc00">];</span>
</span>
</code>
      </div>
      <div class="content-syntaxe">
        <em>var tableau = new Array(element0, element1, ..., elementN);</em>
      </div>
      <div class="content-syntaxe">
        <em>var tableau = new Array(taille);</em>
      </div>
      <div class="content-code">
        <strong>Tableau construit</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;new&#xA0;Array(</span><span style="color: #2aa198">"element0"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"element1"</span><span style="color: #ffcc00">);</span>
</span>
</code>
      </div>
      <div class="content-tips">
        <h4>D&#xE9;claration</h4>
        <p>En utilisant la notation litt&#xE9;rale pour d&#xE9;clarer un tableau le mot new n'est pas utilis&#xE9; et le constructeur de Array n'est pas invoqu&#xE9;. Passer par le constructeur de Array est utile uniquement pour d&#xE9;finir la taille du tableau, la bonne pratique pour d&#xE9;clarer un tableau est d'utiliser la notation litt&#xE9;rale.</p>
      </div>
      <div class="content-box">
        <strong>&#xC9;l&#xE9;ments du tableau</strong>
        <p>Les &#xE9;l&#xE9;ments d'un tableau sont rang&#xE9;s par index num&#xE9;rique. Le premier &#xE9;l&#xE9;ment d'un tableau poss&#xE8;de comme index ou comme clef la valeur num&#xE9;rique 0, l'&#xE9;l&#xE9;ment d'apr&#xE8;s aura comme clef la valeur 1 et ainsi de suite. Pour acc&#xE9;der &#xE0; un &#xE9;l&#xE9;ment particulier il faut d&#xE9;signer sa clef entre crochet &#xE0; la suite de l'identifiant du tableau. </p>
      </div>
      <div class="content-code">
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"element0"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"element1"</span><span style="color: #ffcc00">];
<br/></span><span style="color: #8c8c8c">//&#xA0;element0
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">]);
<br/></span><span style="color: #8c8c8c">//&#xA0;element1
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">1</span><span style="color: #ffcc00">]);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>Taille du tableau</strong>
        <p>Le tableau poss&#xE8;de la propri&#xE9;t&#xE9; length qui retourne la taille du tableau. Cette propri&#xE9;t&#xE9; se met &#xE0; jour quand le nombre des &#xE9;l&#xE9;ments du tableau &#xE9;volue, pour y acc&#xE9;der il faut utiliser un accesseur de propri&#xE9;t&#xE9;. Le point suivi du nom de la propri&#xE9;t&#xE9; ou alors les crochets avec le nom de la propri&#xE9;t&#xE9; entre guillemets permettent d'y acc&#xE9;der.</p>
      </div>
      <div class="content-code">
        <strong>Accesseurs de propri&#xE9;t&#xE9; pour length</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"element0"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"element1"</span><span style="color: #ffcc00">];
<br/></span><span style="color: #8c8c8c">//&#xA0;2
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">length</span><span style="color: #ffcc00">);
<br/></span><span style="color: #8c8c8c">//&#xA0;2
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">[</span><span style="color: #2aa198">"length"</span><span style="color: #ffcc00">]);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <h4>Acc&#xE9;der aux &#xE9;l&#xE9;ments</h4>
        <p>Un tableau poss&#xE8;de des m&#xE9;thodes pour acc&#xE9;der aux &#xE9;l&#xE9;ments ou &#xE0; une repr&#xE9;sentation des &#xE9;l&#xE9;ments. Nous allons voir quelques unes de ces m&#xE9;thodes.</p>
      </div>
      <div class="content-box">
        <strong>join()</strong>
        <p>La m&#xE9;thode join renvoie les &#xE9;l&#xE9;ments d'un tableau sous forme de chaine de caract&#xE8;res, d&#xE9;limit&#xE9;s par le s&#xE9;parateur optionnel pass&#xE9; en argument. La conversion des types null et undefined retourne un caract&#xE8;re vide, alors que la conversion du symbole entraine une erreur.</p>
      </div>
      <div class="content-syntaxe">
        <em>var chaine = tableau.join([separateur = ',']);</em>
      </div>
      <div class="content-code">
        <strong>tableau.join()</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #ffffff">false</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">0.1</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"Hello"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">null</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">undefined</span><span style="color: #ffcc00">,&#xA0;{}];
<br/></span><span style="color: #8c8c8c">//&#xA0;false,&#xA0;0.1,&#xA0;Hello,&#xA0;,&#xA0;,&#xA0;[object&#xA0;Object]
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">join</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">",&#xA0;"</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>toString()</strong>
        <p>La m&#xE9;thode toString renvoie les &#xE9;l&#xE9;ments d'un tableau sous forme de chaine de caract&#xE8;res s&#xE9;par&#xE9;s par une virgule. La conversion des types a le m&#xEA;me comportement que la m&#xE9;thode join.</p>
      </div>
      <div class="content-syntaxe">
        <em>var chaine = tableau.toString();</em>
      </div>
      <div class="content-code">
        <strong>tableau.toString()</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #ffffff">false</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">0.1</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"Hello"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">null</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">undefined</span><span style="color: #ffcc00">,&#xA0;{}];
<br/></span><span style="color: #8c8c8c">//&#xA0;false,0.1,Hello,,,[object&#xA0;Object]
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">toString</span><span style="color: #ffcc00">());</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>indexOf()</strong>
        <p>La m&#xE9;thode indexOf renvoie la clef d'un &#xE9;l&#xE9;ment dont la valeur pass&#xE9;e en argument est pr&#xE9;sente dans le tableau et strictement identique ou renvoie -1. Un second argument optionnel correspond &#xE0; la clef &#xE0; partir de laquelle commence la recherche.</p>
      </div>
      <div class="content-syntaxe">
        <em>var index = tableau.indexOf(element[, index = 0]);</em>
      </div>
      <div class="content-code">
        <strong>tableau.indexOf()</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #ffffff">false</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"false"</span><span style="color: #ffcc00">];
<br/></span><span style="color: #8c8c8c">//&#xA0;0
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">indexOf</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">false</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//&#xA0;-1
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">indexOf</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">false</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">1</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//&#xA0;2
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">indexOf</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"false"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">2</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>slice()</strong>
        <p>La m&#xE9;thode slice renvoie une portion du tableau d'origine. Le premier param&#xE8;tre correspond &#xE0; la clef d&#x2019;o&#xF9; commence l'extraction position inclue et le second param&#xE8;tre optionnel correspond &#xE0; la clef o&#xF9; s'arr&#xEA;te l'extraction position exclue.</p>
      </div>
      <div class="content-syntaxe">
        <em>var portion = tableau.slice(debut[, fin]);</em>
      </div>
      <div class="content-code">
        <strong>tableau.slice()</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">1</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">2</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">3</span><span style="color: #ffcc00">];
<br/></span><span style="color: #8c8c8c">//&#xA0;[1,&#xA0;2,&#xA0;3]
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">slice</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">1</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//&#xA0;[1]
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">slice</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">1</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">2</span><span style="color: #ffcc00">));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <h4>Modifier le tableau</h4>
        <p>Un tableau poss&#xE8;de des m&#xE9;thodes le modifier. Nous allons voir quelques unes de ces m&#xE9;thodes.</p>
      </div>
      <div class="content-box">
        <strong>shift()</strong>
        <p>La m&#xE9;thode shift renvoie et supprime le premier &#xE9;l&#xE9;ment du tableau puis r&#xE9;organise les clefs du tableau. Si le tableau est vide la m&#xE9;thode retourne le type undefined.</p>
      </div>
      <div class="content-syntaxe">
        <em>var element = tableau.shift();</em>
      </div>
      <div class="content-code">
        <strong>tableau.shift()</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"element1"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"element2"</span><span style="color: #ffcc00">];
<br/></span><span style="color: #8c8c8c">//&#xA0;element1
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">shift</span><span style="color: #ffcc00">());
<br/></span><span style="color: #8c8c8c">//&#xA0;1
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">length</span><span style="color: #ffcc00">);
<br/></span><span style="color: #8c8c8c">//&#xA0;element2
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">]);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>unshift()</strong>
        <p>La m&#xE9;thode unshift renvoie la longueur du tableau apr&#xE8;s avoir ins&#xE9;r&#xE9; les valeurs pass&#xE9;es en param&#xE8;tre au d&#xE9;but du tableau. La m&#xE9;thode r&#xE9;organise les clefs du tableau.</p>
      </div>
      <div class="content-syntaxe">
        <em>var index = tableau.unshift([element1[, ...[, elementN]]]);</em>
      </div>
      <div class="content-code">
        <strong>tableau.unshift()</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[];
<br/></span><span style="color: #8c8c8c">//&#xA0;2
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">unshift</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"element1"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"element2"</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//&#xA0;element1
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">]);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>pop()</strong>
        <p>La m&#xE9;thode pop renvoie et supprime le dernier &#xE9;l&#xE9;ment du tableau. Si le tableau est vide la m&#xE9;thode renvoie le type undefined.</p>
      </div>
      <div class="content-syntaxe">
        <em>var element = tableau.pop();</em>
      </div>
      <div class="content-code">
        <strong>tableau.pop()</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"element1"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"element2"</span><span style="color: #ffcc00">];
<br/></span><span style="color: #8c8c8c">//&#xA0;element2
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">pop</span><span style="color: #ffcc00">());
<br/></span><span style="color: #8c8c8c">//&#xA0;1
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">length</span><span style="color: #ffcc00">);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>push()</strong>
        <p>La m&#xE9;thode push renvoie la longueur du tableau apr&#xE8;s avoir ins&#xE9;r&#xE9; les valeurs pass&#xE9;es en param&#xE8;tre en fin de tableau.</p>
      </div>
      <div class="content-syntaxe">
        <em>var index = tableau.push([element1[, ...[, elementN]]]);</em>
      </div>
      <div class="content-code">
        <strong>tableau.push()</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"element1"</span><span style="color: #ffcc00">];
<br/></span><span style="color: #8c8c8c">//&#xA0;2
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">push</span><span style="color: #ffcc00">(</span><span style="color: #2aa198">"element2"</span><span style="color: #ffcc00">));
<br/></span><span style="color: #8c8c8c">//&#xA0;element2
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">1</span><span style="color: #ffcc00">]);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>sort()</strong>
        <p>La m&#xE9;thode sort renvoie le tableau apr&#xE8;s l'avoir tri&#xE9; selon l'ordre Unicode des valeurs du tableau, les chiffres sont avant les lettres, les majuscules avant les minuscules, le 10 avant le 2. Un param&#xE8;tre optionnel permet de fournir une fonction &#xE0; utiliser pour trier le tableau.</p>
      </div>
      <div class="content-syntaxe">
        <em>var tableau_copie = tableau.sort([function]);</em>
      </div>
      <div class="content-code">
        <strong>tableau.sort()</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #ffffff">2</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">10</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"a"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #2aa198">"A"</span><span style="color: #ffcc00">];
<br/></span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">sort</span><span style="color: #ffcc00">();
<br/></span><span style="color: #8c8c8c">//&#xA0;[10,&#xA0;2,&#xA0;"A",&#xA0;"a"]
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">);</span>
</span>
</code>
      </div>
      <h3 id="c_01_literal">Les litt&#xE9;raux objets et les op&#xE9;rateurs unaires</h3>
      <div class="content-box">
        <h4>Les litt&#xE9;raux objets</h4>
        <p>Un objet litt&#xE9;ral est un initialisateur d'objet soit un objet auto construit. Il contient entre des accolades une liste de paire de propri&#xE9;t&#xE9; et de valeur associ&#xE9;e. Son int&#xE9;r&#xEA;t est de pouvoir cr&#xE9;er un objet rapidement sans passer par un constructeur et en inscrivant ses propri&#xE9;t&#xE9;s &#xE0; la d&#xE9;claration de l'objet.</p>
      </div>
      <div class="content-syntaxe">
        <em>var objet= {[propriete: valeur[, ...[, proprieteN: valeurN]]]};</em>
      </div>
      <div class="content-code">
        <strong>Objet litt&#xE9;ral</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">objet&#xA0;</span><span style="color: #ffcc00">=&#xA0;{};
<br/></span><span style="color: #8c8c8c">//&#xA0;Object&#xA0;{}
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">objet</span><span style="color: #ffcc00">);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <strong>Propri&#xE9;t&#xE9;s</strong>
        <p>Les propri&#xE9;t&#xE9;s peuvent avoir comme identifiant une valeur num&#xE9;rique ou textuelle entour&#xE9;e ou non par des guillemets, la valeur d'une propri&#xE9;t&#xE9; est d&#xE9;finie par le double point et les propri&#xE9;t&#xE9;s de l'objet sont s&#xE9;par&#xE9;es par une virgule. Pour acc&#xE9;der &#xE0; une propri&#xE9;t&#xE9; le point peut-&#xEA;tre utilis&#xE9; si l'identifiant de la propri&#xE9;t&#xE9; n'est pas num&#xE9;rique.</p>
      </div>
      <div class="content-code">
        <strong>Propri&#xE9;t&#xE9;s d'un objet litt&#xE9;ral</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">objet&#xA0;</span><span style="color: #ffcc00">=&#xA0;{&#xA0;</span><span style="color: #ffffff">1</span><span style="color: #ffcc00">:&#xA0;</span><span style="color: #2aa198">"valeur"</span><span style="color: #ffcc00">,&#xA0;</span><span style="color: #ffffff">propriete</span><span style="color: #ffcc00">:&#xA0;</span><span style="color: #2aa198">"valeur2"&#xA0;</span><span style="color: #ffcc00">};
<br/></span><span style="color: #8c8c8c">//&#xA0;valeur
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">objet</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">1</span><span style="color: #ffcc00">]);
<br/></span><span style="color: #8c8c8c">//&#xA0;valeur2
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">objet</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">propriete</span><span style="color: #ffcc00">);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <h4>delete</h4>
        <p>Les propri&#xE9;t&#xE9;s d'un objet ou les &#xE9;l&#xE9;ments d'un tableau peuvent &#xEA;tres supprim&#xE9;es en utilisant l'op&#xE9;rateur delete suivi de la propri&#xE9;t&#xE9; de l'objet ou de l'index du tableau.</p>
      </div>
      <div class="content-code">
        <strong>Op&#xE9;rateur delete</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #ffcc00">var&#xA0;</span><span style="color: #ffffff">objet&#xA0;</span><span style="color: #ffcc00">=&#xA0;{&#xA0;</span><span style="color: #ffffff">propriete</span><span style="color: #ffcc00">:&#xA0;</span><span style="color: #2aa198">"valeur"&#xA0;</span><span style="color: #ffcc00">};
<br/></span><span style="color: #ffffff">delete&#xA0;objet</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">propriete</span><span style="color: #ffcc00">;
<br/></span><span style="color: #8c8c8c">//&#xA0;undefined
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">objet</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">propriete</span><span style="color: #ffcc00">);
<br/>
<br/>var&#xA0;</span><span style="color: #ffffff">tableau&#xA0;</span><span style="color: #ffcc00">=&#xA0;[</span><span style="color: #2aa198">"valeur"</span><span style="color: #ffcc00">];
<br/></span><span style="color: #ffffff">delete&#xA0;tableau</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">];
<br/></span><span style="color: #8c8c8c">//&#xA0;undefined
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">tableau</span><span style="color: #ffcc00">[</span><span style="color: #ffffff">0</span><span style="color: #ffcc00">]);</span>
</span>
</code>
      </div>
      <div class="content-box">
        <h4>typeof</h4>
        <p>Le type d'une op&#xE9;rande peut &#xEA;tre retourn&#xE9; sous forme de chaine de caract&#xE8;res par l'op&#xE9;rateur typeof, les parenth&#xE8;ses de l'op&#xE9;rateur sont facultatives.</p>
      </div>
      <div class="content-syntaxe">
        <em>var type = typeof (operande);</em>
      </div>
      <div class="content-code">
        <strong>Op&#xE9;rateur typeof</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #8c8c8c">//&#xA0;object
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">(</span><span style="color: #ffffff">typeof&#xA0;</span><span style="color: #ffcc00">({}));</span>
</span>
</code>
      </div>
      <div class="content-box">
        <h4>instanceof</h4>
        <p>L'op&#xE9;rateur instanceof s'utilise pour v&#xE9;rifier si le  constructeur d'un objet utilise par lien de parent&#xE9; le constructeur d'un autre objet.</p>
      </div>
      <div class="content-syntaxe">
        <em>var appartenance = objet instanceof Nom;</em>
      </div>
      <div class="content-code">
        <strong>Op&#xE9;rateur instanceof</strong>
        <code><span style="color: #ffffff">
<span style="color: #ffffff">
</span><span style="color: #8c8c8c">//&#xA0;true
<br/></span><span style="color: #ffffff">console</span><span style="color: #ffcc00">.</span><span style="color: #ffffff">log</span><span style="color: #ffcc00">({}&#xA0;instanceof&#xA0;</span><span style="color: #ffffff">Object</span><span style="color: #ffcc00">);</span>
</span>
</code>
      </div>
    </div>
  </body>
</html>